name: CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'
  REGISTRY: ghcr.io
  IMAGE_NAME: rajsinghtech/tsdnsproxy

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      - uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - {os: linux, arch: amd64}
          - {os: linux, arch: arm64}
          - {os: darwin, arch: amd64}
          - {os: darwin, arch: arm64}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }}" \
            -o tsdnsproxy-${{ matrix.os }}-${{ matrix.arch }} ./cmd/tsdnsproxy
      
      - name: Package binary
        if: startsWith(github.ref, 'refs/tags/')
        run: tar czf tsdnsproxy-${{ matrix.os }}-${{ matrix.arch }}.tar.gz tsdnsproxy-${{ matrix.os }}-${{ matrix.arch }}
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: tsdnsproxy-${{ matrix.os }}-${{ matrix.arch }}
          path: tsdnsproxy-${{ matrix.os }}-${{ matrix.arch }}${{ startsWith(github.ref, 'refs/tags/') && '.tar.gz' || '' }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      
      - name: Log in to Registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: VERSION=${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*/*.tar.gz
          generate_release_notes: true
          fail_on_unmatched_files: true